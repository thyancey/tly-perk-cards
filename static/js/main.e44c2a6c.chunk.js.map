{"version":3,"sources":["themes/index.ts","app/hooks.ts","app/data/data.tsx","scenes/main/slice.tsx","scenes/main/components/card-details.tsx","scenes/main/components/card.tsx","scenes/main/components/card-pile.tsx","scenes/main/components/gamestats.tsx","scenes/main/index.tsx","App.tsx","app/store.ts","serviceWorker.ts","index.tsx"],"names":["createGlobalStyle","getColor","colorId","store","colors","black","grey","grey_light","white","blue","green","yellow","red","purple","shadows","z1","z2","z3","breakpoints","mobile_tiny","mobile_medium","mobile_large","tablet","desktop","useAppDispatch","useDispatch","useAppSelector","useSelector","ALL_CARDS_MAP","title","description","img","modifiers","type","value","DECK_DATA","id","idx","count","deckSlice","createSlice","name","initialState","deckStatus","hand","gameStats","reducers","initCards","state","createDeck","dealCards","curDeckStatus","map","dS","active","dealtIndicies","drawCardIndicies","includes","dealt","augmentStats","action","statType","payload","actions","getDeckStatus","data","getCardData","cardStatus","selectGameStats","createSelector","console","log","Object","keys","key","selectDealtHand","filter","h","selectDrawPile","d","cS","selectDiscardPile","availableDeck","i","length","drawnIdx","Math","floor","random","thingy","push","deckIdx","splice","allCards","cardInfo","j","Container","styled","div","CardDescription","p","ModifierContainer","ul","Modifier","li","CardDetails","m","FaceDownCard","isTiny","css","ImageContainer","TitleContainer","DescriptionContainer","CardImage","url","CardFrame","Card","cardData","offsetIdx","isFaceDown","dispatch","style","undefined","left","top","onClick","CardPile","cards","cardDef","GameStats","gs","Modal","Titletext","CardContainer","DetailContainer","DealButton","button","CardWrapper","DrawPile","DiscardPile","Main","dealtHand","drawPile","discardPile","useEffect","ScHeader","ScStage","App","useState","collapsed","setCollapsed","pages","route","text","element","className","to","path","configureStore","reducer","deckReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e44c2a6c.chunk.js","sourcesContent":["import { createGlobalStyle } from \"styled-components\"\r\n\r\nexport default createGlobalStyle`\r\n  *{\r\n    margin: 0;\r\n    padding: 0;\r\n    outline:0;\r\n    box-sizing:border-box;\r\n  }\r\n  #root{\r\n    margin:0 auto;\r\n  }\r\n  h1, h2, h3, h4{\r\n    font-family: 'Bevan', cursive;\r\n  }\r\n  a, p, span, h5, h6{\r\n    font-family: 'Cabin', sans-serif;\r\n  }\r\n  h1{\r\n    font-size: 5rem;\r\n  }\r\n  h2{\r\n    font-size: 4rem;\r\n  }\r\n  h3{\r\n    font-size: 3.5rem;\r\n  }\r\n  h4{\r\n    font-size: 2.5rem;\r\n  }\r\n  h5{\r\n    font-size: 2rem;\r\n  }\r\n  p, span{\r\n    font-size:2rem;\r\n  }\r\n\r\n  html{\r\n    font-size: 62.5%;\r\n    -webkit-font-smoothing: antialiased;\r\n    -moz-osx-font-smoothing: grayscale;\r\n    font-family: 'Cabin', sans-serif;\r\n    background-color: black;\r\n  }\r\n  \r\n  code {\r\n    font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New', monospace;\r\n  }\r\n`\r\n\r\n/*\r\nexport const mixinFontFamily = (style) => {\r\n  switch(style){\r\n    case 'details' : return css`font-family: 'Roboto', sans-serif`;\r\n    case 'display': return css`font-family: 'Bevan', cursive`;\r\n    default: return css`font-family: 'Roboto', sans-serif`;\r\n  }\r\n}\r\n*/\r\nexport const listColors = () => {\r\n  return Object.keys(store.colors);\r\n}\r\n\r\n\r\nexport const getColor = (colorId: tColor) => {\r\n  return store.colors[colorId] as CssString; \r\n}\r\n\r\nexport const getShadow = (shadowId: tShadow) => {\r\n  return store.shadows[shadowId] as CssString;\r\n}\r\n\r\nexport const getBreakpoint = (breakpointId: tBreakpoint) => {\r\n  return store.breakpoints[breakpointId] as CssString;\r\n}\r\n\r\ntype CssString = string;\r\n\r\ntype tShadow = 'z1' | 'z2' | 'z3';\r\nconst shadows = {\r\n  z1: '-0.1rem 0.1rem .25rem .1rem rgba(0,0,0,0.16)',\r\n  z2: '-0.1rem 0.1rem .25rem .1rem rgba(0,0,0,0.36)',\r\n  z3: '-.2rem .5rem 1rem .2rem rgba(0,0,0,.36)'\r\n}\r\ntype tColor = 'black' | 'grey' | 'grey_light' | 'white' | 'blue' | 'green' | 'yellow' | 'red' | 'purple';\r\nconst colors = {\r\n  black: '#000000',\r\n  grey: '#373737',\r\n  grey_light: '#A39F8E',\r\n  white: '#fef8dd',\r\n  blue: '#1fb9f3',\r\n  green: '#51f249',\r\n  yellow: '#fff249',\r\n  red: '#F55658',\r\n  purple: '#6b1ff3'\r\n}\r\n\r\ntype tBreakpoint = 'mobile_tiny' | 'mobile_medium' | 'mobile_large' | 'tablet' | 'desktop';\r\nconst breakpoints = {\r\n  mobile_tiny: '300px',\r\n  mobile_medium: '400px',\r\n  mobile_large: '500px',\r\n  tablet: '768px',\r\n  desktop: '1024px'\r\n}\r\n\r\ntype ThemeStore = {\r\n  colors: typeof colors,\r\n  shadows: typeof shadows,\r\n  breakpoints: typeof breakpoints\r\n}\r\n\r\nexport const store: ThemeStore = {\r\n  colors: colors,\r\n  shadows: shadows,\r\n  breakpoints: breakpoints\r\n}\r\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\r\nimport type { RootState, AppDispatch } from './store';\r\n\r\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n","export const ALL_CARDS_MAP: any = {\r\n  \"DORITO_SNAKE\": {\r\n    title: 'CURSED DORITOS',\r\n    description: 'A snake with doritos',\r\n    img: 'assets/cards/alien-doritos.jpg',\r\n    modifiers:[\r\n      {\r\n        type: 'health',\r\n        value: 1.2\r\n      },\r\n      {\r\n        type: 'damage',\r\n        value: -1.3\r\n      }\r\n    ]\r\n  },\r\n  \"SPACE_BANANA\": {\r\n    title: 'SPACE BANANA',\r\n    description: `Bananas don't rot in space`,\r\n    img: 'assets/cards/banana-astro.jpg',\r\n    modifiers:[\r\n      {\r\n        type: 'health',\r\n        value: 1.1\r\n      },\r\n      {\r\n        type: 'damage',\r\n        value: -1.4\r\n      }\r\n    ]\r\n  },\r\n  \"BLOOD_DRAGON\": {\r\n    title: 'ANCIENT SLAYER',\r\n    description: 'Dragons love blood',\r\n    img: 'assets/cards/dragon.jpg',\r\n    modifiers:[\r\n      {\r\n        type: 'health',\r\n        value: 3.1\r\n      },\r\n      {\r\n        type: 'damage',\r\n        value: 50.0\r\n      }\r\n    ]\r\n  },\r\n  \"RAIN_CAT\": {\r\n    title: 'RAIN CAT',\r\n    description: 'This cat is in the rain',\r\n    img: 'assets/cards/cat-rain.jpg',\r\n    modifiers:[\r\n      {\r\n        type: 'wetness',\r\n        value: 1\r\n      },\r\n      {\r\n        type: 'happyness',\r\n        value: -.5\r\n      }\r\n    ]\r\n  }\r\n};\r\n\r\nexport const DECK_DATA: any = [\r\n  {\r\n    id: 'DORITO_SNAKE',\r\n    idx: 0,\r\n    count: 5\r\n  },\r\n  {\r\n    id: 'SPACE_BANANA',\r\n    idx: 1,\r\n    count: 2\r\n  },\r\n  {\r\n    id: 'BLOOD_DRAGON',\r\n    idx: 2,\r\n    count: 1\r\n  },\r\n  {\r\n    id: 'RAIN_CAT',\r\n    idx: 3,\r\n    count: 1\r\n  }\r\n];","import { createSelector, createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { RootState } from '../../app/store';\r\nimport { CardDef, CardModifier, CardStatus, GameStats } from '../../types';\r\nimport { ALL_CARDS_MAP, DECK_DATA } from '../../app/data/data';\r\nimport { FaceRounded, SatelliteSharp } from '@material-ui/icons';\r\n\r\nexport interface DeckState {\r\n  deckStatus: CardStatus[];\r\n  hand: number[];\r\n  gameStats: GameStats;\r\n}\r\n\r\nconst initialState: DeckState = {\r\n  deckStatus: [],\r\n  hand: [],\r\n  gameStats: {}\r\n};\r\n\r\nexport const deckSlice = createSlice({\r\n  name: 'deck',\r\n  initialState,\r\n  reducers: {\r\n    initCards: (state) => {\r\n      state.deckStatus = createDeck();\r\n    },\r\n    dealCards: (state) => {\r\n      const curDeckStatus = state.deckStatus.map((dS: CardStatus, idx: number) => {\r\n        if(dS.active){\r\n          return {\r\n            ...dS,\r\n            active: false\r\n          } as CardStatus;\r\n        }\r\n        return dS;\r\n      });\r\n\r\n      const dealtIndicies = drawCardIndicies(curDeckStatus);\r\n\r\n      state.deckStatus = curDeckStatus.map((dS: CardStatus, idx: number) => {\r\n        if(dealtIndicies.includes(idx)){\r\n          return {\r\n            ...dS,\r\n            dealt: true,\r\n            active: true\r\n          } as CardStatus;\r\n        }\r\n        return dS;\r\n      });\r\n\r\n      state.hand = dealtIndicies;\r\n    },\r\n    augmentStats: (state, action: PayloadAction<CardModifier>) => {\r\n      const statType = action.payload.type;\r\n      if(state.gameStats[statType]){\r\n        state.gameStats[statType].value = state.gameStats[statType].value + action.payload.value;\r\n      }else{\r\n        state.gameStats[statType] = {\r\n          type: statType,\r\n          value: action.payload.value\r\n        };\r\n      }\r\n\r\n      state.deckStatus = state.deckStatus.map((dS: CardStatus, idx: number) => {\r\n        if(state.hand.includes(idx)){\r\n          return {\r\n            ...dS,\r\n            active: false\r\n          } as CardStatus;\r\n        }\r\n        return dS;\r\n      });\r\n\r\n\r\n      state.hand = [];\r\n    }\r\n  }\r\n});\r\n\r\nexport const { initCards, dealCards, augmentStats } = deckSlice.actions;\r\n\r\nexport const getDeckStatus = (state: RootState) => state.data.deckStatus;\r\nexport const getHand = (state: RootState) => state.data.hand;\r\nexport const getGameStats = (state: RootState) => state.data.gameStats;\r\n\r\nexport const getCardData = (cardStatus: CardStatus) => {\r\n  return ALL_CARDS_MAP[cardStatus.id];\r\n};\r\n\r\nexport const selectGameStats = createSelector(\r\n  [getGameStats],\r\n  (gameStats): CardModifier[] => {\r\n    console.log('hello', gameStats);\r\n\r\n    // @ts-ignore\r\n    return Object.keys(gameStats).map(key => gameStats[key]) as CardModifier[];\r\n  }\r\n);\r\n\r\nexport const selectDealtHand = createSelector(\r\n  [getHand, getDeckStatus],\r\n  (hand, deckStatus): CardDef[] => {\r\n\r\n    return hand.filter(h => h !== -1).map(h => {\r\n      return getCardData(deckStatus[h]);\r\n    });\r\n  }\r\n);\r\n\r\nexport const selectDrawPile = createSelector(\r\n  [getDeckStatus],\r\n  (deckStatus): CardDef[] => {\r\n    return deckStatus.filter(d => !d.dealt).map(cS => {\r\n      return getCardData(cS);\r\n    });\r\n  }\r\n);\r\n\r\nexport const selectDiscardPile = createSelector(\r\n  [getDeckStatus],\r\n  (deckStatus): CardDef[] => {\r\n    return deckStatus.filter(d => (d.dealt && !d.active)).map(cS => {\r\n      return getCardData(cS);\r\n    });\r\n  }\r\n);\r\n\r\nexport const drawCardIndicies = (deckStatus: CardStatus[]) => {\r\n  const dealtIndicies: number[] = [];\r\n  let availableDeck = deckStatus.filter(cS => !cS.dealt);\r\n  for(let i = 0; i < 3; i++){\r\n    if(availableDeck.length === 0) {\r\n      // deck is now empty.\r\n      break;\r\n    }\r\n    const drawnIdx = Math.floor(availableDeck.length * Math.random());\r\n    const thingy = availableDeck[drawnIdx];\r\n    dealtIndicies.push(thingy.deckIdx);\r\n    availableDeck.splice(drawnIdx, 1);\r\n  }\r\n\r\n  return dealtIndicies;\r\n}\r\n\r\nexport const createDeck = () => {\r\n  let allCards = [];\r\n  for(let i = 0; i < DECK_DATA.length; i++){\r\n    const cardInfo = DECK_DATA[i];\r\n    if(ALL_CARDS_MAP[cardInfo.id]){\r\n      for(let j = 0; j < cardInfo.count; j++){\r\n        allCards.push({\r\n          id: cardInfo.id,\r\n          deckIdx: allCards.length,\r\n          dealt: false,\r\n          active: false\r\n        } as CardStatus);\r\n      }\r\n    }\r\n  }\r\n\r\n  return allCards;\r\n};\r\n\r\nexport default deckSlice.reducer;","import styled from 'styled-components';\r\nimport { getColor } from '../../../themes';\r\nimport { CardModifier } from '../../../types';\r\n\r\nexport const Container = styled.div`\r\n`\r\n\r\nexport const CardDescription = styled.p`\r\n`\r\n\r\nexport const ModifierContainer = styled.ul`\r\n  padding: 1rem;\r\n  border-radius:.5rem;\r\n  box-shadow: -.25rem -.25rem solid black;\r\n`\r\n\r\nexport const Modifier = styled.li`\r\n  span{\r\n    font-size:1.3rem;\r\n  }\r\n\r\n  span:first-child{\r\n    color:red;\r\n    font-weight: bold;\r\n  }\r\n\r\n  span:last-child{\r\n    color:green;\r\n    margin-left:1rem;\r\n  }\r\n`\r\n\r\ntype Props = {\r\n  description: string,\r\n  modifiers: CardModifier[]\r\n}\r\n\r\nexport function CardDetails({ description, modifiers }: Props) {\r\n  return (\r\n    <Container>\r\n      <CardDescription>{description}</CardDescription>\r\n      <ModifierContainer>\r\n        {modifiers.map((m, i) => (\r\n          <Modifier key={m.type}>\r\n            <div>\r\n              <span>{`${m.type}:`}</span>\r\n              <span>{m.value}</span>\r\n            </div>\r\n          </Modifier>\r\n        ))}\r\n      </ModifierContainer>\r\n    </Container>\r\n  );\r\n}\r\n","import { useState } from 'react';\r\nimport styled, { css } from 'styled-components';\r\nimport { useAppDispatch } from '../../../app/hooks';\r\nimport { getColor } from '../../../themes';\r\nimport { CardDef } from '../../../types';\r\nimport { augmentStats } from '../slice';\r\nimport { CardDetails } from './card-details';\r\n\r\ntype ContainerProps = {\r\n  isTiny?: boolean\r\n}\r\n\r\nexport const FaceDownCard = styled.div<ContainerProps>`\r\n  position:absolute;\r\n  width: 20rem;\r\n  height: 34rem;\r\n  left:50%;\r\n  top:50%;\r\n  transform: translate(-50%, -50%);\r\n  cursor: pointer;\r\n  transform-origin: top;\r\n\r\n  background-color: ${getColor('blue')};\r\n  border-radius: 2rem;\r\n  border: .5rem solid ${getColor('grey')};\r\n  \r\n  ${p => p.isTiny && css`\r\n    transform: scale(.5, .5) translate(-50%, -50%);\r\n\r\n    &:hover{\r\n      transform: scale(.5, .5) translate(-50%, -50%);\r\n    }\r\n  `}\r\n`\r\n\r\nexport const Container = styled.div<ContainerProps>`\r\n  position:absolute;\r\n  width: 20rem;\r\n  height: 34rem;\r\n  left:50%;\r\n  top:50%;\r\n  transform: translate(-50%, -50%);\r\n  cursor: pointer;\r\n  transform-origin: top;\r\n\r\n  background-color: ${getColor('white')};\r\n  border-radius: 2rem;\r\n  border: .5rem solid ${getColor('grey')};\r\n  \r\n  &:hover{\r\n    transform: scale(1.3, 1.3) rotate(-0.005turn) translate(-50%, -50%);\r\n    transition: transform .2s;\r\n  }\r\n\r\n  ${p => p.isTiny && css`\r\n    transform: scale(.5, .5) translate(-50%, -50%);\r\n\r\n    &:hover{\r\n      transform: scale(.5, .5) translate(-50%, -50%);\r\n    }\r\n  `}\r\n`\r\nexport const ImageContainer = styled.div`\r\n  position:relative;\r\n  height:45%;\r\n  width:100%;\r\n`\r\nexport const TitleContainer = styled.div`\r\n  position:relative;\r\n  height:10%;\r\n  width:100%;\r\n\r\n  >div{\r\n    min-height: 1rem;\r\n\r\n    position:absolute;\r\n    width:100%;\r\n    top:50%;\r\n    transform: translateY(-50%);\r\n    background-color:black;\r\n    padding: .5rem;\r\n\r\n    >p{\r\n      font-size: 1.5rem;\r\n      text-align:center;\r\n    }\r\n  }\r\n`\r\nexport const DescriptionContainer = styled.div`\r\n  height:45%;\r\n  width:100%;\r\n  padding:1rem 1rem;\r\n`\r\ntype CardImageProps = {\r\n  url: string\r\n}\r\n\r\nexport const CardImage = styled.div<CardImageProps>`\r\n  width:100%;\r\n  height:100%;\r\n  background: url(${p => p.url}) no-repeat center;\r\n  background-size:cover;\r\n  \r\n  border-radius: 2rem 2rem 0 0;\r\n`\r\n\r\nexport const CardFrame = styled.div`\r\n  border-radius: 1rem;\r\n  background-color: ${getColor('white')};\r\n  position:absolute;\r\n  top:0;\r\n  right:0;\r\n  bottom:0;\r\n  left:0;\r\n  z-index:-1;\r\n`\r\n\r\ntype Props = {\r\n  cardData: CardDef,\r\n  offsetIdx?: number,\r\n  isFaceDown?: boolean\r\n}\r\n\r\nexport function Card({ cardData, offsetIdx, isFaceDown }: Props) {\r\n  const dispatch = useAppDispatch();\r\n  const style = offsetIdx !== undefined ? { left: offsetIdx * 5, top: offsetIdx * 5 } : {};\r\n\r\n  const onCardClick = () => {\r\n    for(let i = 0; i < cardData.modifiers.length; i++){\r\n      dispatch(augmentStats(cardData.modifiers[i]));\r\n    }\r\n  }\r\n\r\n  if(isFaceDown){\r\n    return (\r\n      <FaceDownCard style={style} isTiny={offsetIdx !== undefined}/>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Container style={style} isTiny={offsetIdx !== undefined} onClick={onCardClick}>\r\n      <ImageContainer>\r\n        {cardData.img && <CardImage url={cardData.img}></CardImage>}\r\n      </ImageContainer>\r\n      <TitleContainer>\r\n        <div>\r\n          <p>{cardData.title}</p>\r\n        </div>\r\n      </TitleContainer>\r\n      <DescriptionContainer>\r\n        <CardDetails \r\n          description={cardData.description}\r\n          modifiers={cardData.modifiers}\r\n        />\r\n      </DescriptionContainer>\r\n      <CardFrame />\r\n    </Container>\r\n  );\r\n}\r\n","import styled from 'styled-components';\r\nimport { Card } from './card';\r\nimport { CardDef } from '../../../types';\r\n\r\nexport const Container = styled.div`\r\n  position:relative;\r\n  margin-top:10rem;\r\n`\r\n\r\ntype Props = {\r\n  cards: CardDef[];\r\n  isFaceDown?: boolean;\r\n}\r\n\r\nexport function CardPile({ cards, isFaceDown }: Props) {\r\n  return (\r\n    <Container>\r\n      { cards.map((cardDef:CardDef, idx: number) => (\r\n        <Card offsetIdx={idx} key={idx} cardData={cardDef} isFaceDown={isFaceDown}/>\r\n      )) }\r\n    </Container>\r\n  );\r\n}\r\n","import styled from 'styled-components';\r\nimport { getColor } from '../../../themes';\r\nimport { useAppSelector } from '../../../app/hooks';\r\nimport { selectGameStats } from '../slice';\r\n\r\n\r\nexport const Container = styled.div`\r\n  position:absolute;\r\n  width:100%;\r\n  top:0;\r\n  background-color: ${getColor('white')};\r\n  color: ${getColor('black')};\r\n`\r\n\r\nexport function GameStats() {\r\n  const gameStats = useAppSelector(selectGameStats);\r\n  console.log('gameStats', gameStats);\r\n  if(!gameStats) return null;\r\n\r\n  return (\r\n    <Container>\r\n      {\r\n        gameStats.map(gs => (\r\n          <p key={gs.type}>{`${gs.type}: ${gs.value}`}</p>\r\n        ))\r\n      }\r\n    </Container>\r\n  );\r\n}\r\n","import styled from 'styled-components';\r\nimport { getColor } from '../../themes';\r\nimport { Card } from './components/card';\r\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\r\nimport { dealCards, initCards, selectDealtHand, selectDiscardPile, selectDrawPile } from './slice';\r\nimport { useEffect } from 'react';\r\nimport { CardDef } from '../../types';\r\nimport { CardPile } from './components/card-pile';\r\nimport { GameStats } from './components/gamestats';\r\n\r\nexport const Container = styled.div`\r\n  position:absolute;\r\n  left:0;\r\n  top:0;\r\n  bottom:0;\r\n  right:0;\r\n  background-color: ${getColor('black')};\r\n  color: ${getColor('white')};\r\n  z-index:-1;\r\n  padding-top:10rem;\r\n  z-index:1;\r\n`\r\n\r\nexport const Modal = styled.div`\r\n  width:80%;\r\n  height:80%;\r\n  position:absolute;\r\n  left:10%;\r\n  top:10%;\r\n  border: 1rem solid white;\r\n`\r\n\r\nexport const Titletext = styled.div`\r\n  height:8%;\r\n  width:100%;\r\n  text-align:center;\r\n`\r\nexport const CardContainer = styled.div`\r\n  width:100%;\r\n  height:80%;\r\n`\r\nexport const DetailContainer = styled.div`\r\n  height:12%;\r\n  width:100%;\r\n  text-align:center;\r\n`\r\n\r\nexport const DealButton = styled.button`\r\n  position:absolute;\r\n  bottom:2rem;\r\n  width: 80%;\r\n  left: 10%;\r\n  background: none;\r\n  border: none;\r\n\r\n  padding: 1rem 2rem;\r\n\r\n  background-color: ${getColor('green')};\r\n  color: ${getColor('white')};\r\n  font-weight: bold;\r\n  font-size: 3rem;\r\n\r\n  border-radius: 2rem;\r\n\r\n  cursor: pointer;\r\n  &:hover{\r\n    background-color: ${getColor('blue')};\r\n  }\r\n  &:active{\r\n    background-color: ${getColor('purple')};\r\n  }\r\n`\r\nexport const CardWrapper = styled.div`\r\n  display: inline-block;\r\n  width:33%;\r\n  height: 100%;\r\n  color: ${getColor('blue')};\r\n\r\n  position:relative;\r\n\r\n  padding: 1rem;\r\n`\r\nexport const DrawPile = styled.div`\r\n  position: absolute;\r\n  left:0;\r\n  width:10rem;\r\n  height:20rem;\r\n`\r\nexport const DiscardPile = styled.div`\r\n  position: absolute;\r\n\r\n  right:0;\r\n  width:10rem;\r\n  height:20rem;\r\n`\r\n\r\n\r\nexport function Main() {\r\n  const dispatch = useAppDispatch();\r\n  const dealtHand = useAppSelector(selectDealtHand);\r\n  const drawPile = useAppSelector(selectDrawPile);\r\n  const discardPile = useAppSelector(selectDiscardPile);\r\n\r\n  console.log('discarded', discardPile)\r\n\r\n  useEffect(() => {\r\n    dispatch(initCards());\r\n  }, []);\r\n  \r\n  const onDealButton = () => {\r\n    dispatch(dealCards());\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <GameStats />\r\n      <DrawPile>\r\n        <CardPile cards={drawPile} isFaceDown={true} />\r\n      </DrawPile>\r\n      <DiscardPile>\r\n        <CardPile cards={discardPile} />\r\n      </DiscardPile>\r\n      <Modal>\r\n        <Titletext>\r\n          <h2>{'CHOOSE SOME CARDS'}</h2>\r\n        </Titletext>\r\n        <CardContainer>\r\n          { dealtHand.map((cardDef:CardDef, idx: number) => (\r\n            <CardWrapper>\r\n              <Card key={idx} cardData={cardDef}/>\r\n            </CardWrapper>\r\n          )) }\r\n        </CardContainer>\r\n        <DetailContainer><p>{'Something something extra text.. details?'}</p></DetailContainer>\r\n      </Modal>\r\n      <DealButton onClick={onDealButton}>{'DEAL'}</DealButton>\r\n    </Container>\r\n  );\r\n}\r\n","import  { useState } from 'react';\r\nimport { getColor } from './themes/';\r\nimport { Main } from './scenes/main';\r\nimport { HashRouter, Route, Routes, Link } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\n\r\nexport const GroupContainer = styled.div`\r\n  background-color: ${getColor('blue')};\r\n  border: 1rem solid ${getColor('white')};\r\n  border-radius: 5rem;\r\n  margin: 3rem;\r\n  padding: 2rem 3.3rem;\r\n`;\r\n\r\nexport const ScHeader = styled.div`\r\n  position:fixed;\r\n  top:0;\r\n  left:0;\r\n  transition: top .5s ease-in-out;\r\n\r\n  width: 100%;\r\n  height:10rem;\r\n  border-bottom:1rem solid blue;\r\n  color:white;\r\n  z-index:1;\r\n  background-color:black;\r\n\r\n  &.collapsed{\r\n    top:-8rem;\r\n    transition: top .5s ease-in-out;\r\n  }\r\n\r\n  >.link-button{\r\n    color:white;\r\n    display:inline-block;\r\n    vertical-align:middle;\r\n    margin:1.4rem 1.8rem;\r\n    transition: color .5s ease-in;\r\n    &:hover{\r\n      color: ${getColor('yellow')};\r\n      transition: color .2s ease-out;\r\n    }\r\n  }\r\n`;\r\n\r\nexport const ScStage = styled.div`\r\n  position:absolute;\r\n  left:0;\r\n  top:0;\r\n  right:0;\r\n  bottom:0;\r\n  padding-top:5rem;\r\n`\r\n\r\nfunction App() {\r\n  const [ collapsed, setCollapsed ] = useState(false);\r\n  const pages = [\r\n    {\r\n      route: '/cards',\r\n      text: 'Cards',\r\n      element: <Main/>\r\n    }\r\n  ]\r\n  \r\n  return (\r\n    <HashRouter>\r\n      <ScHeader className={ collapsed ? 'collapsed' : ''} onClick={() => setCollapsed(!collapsed)}>\r\n        {pages.map((p, i) => (\r\n          <Link key={i} to={p.route} className=\"link-button\">\r\n            <h2>{p.text}</h2>\r\n          </Link>\r\n        ))}\r\n      </ScHeader>\r\n      <ScStage>\r\n        <Routes>\r\n          {pages.map((p, i) => (\r\n            <Route key={i} path={p.route} element={p.element} />\r\n          ))}\r\n        </Routes>\r\n      </ScStage>\r\n    </HashRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\r\nimport deckReducer from '../scenes/main/slice';\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    data: deckReducer,\r\n  },\r\n});\r\n\r\nexport type AppDispatch = typeof store.dispatch;\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppThunk<ReturnType = void> = ThunkAction<\r\n  ReturnType,\r\n  RootState,\r\n  unknown,\r\n  Action<string>\r\n>;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport { store } from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport './themes/fonts.css';\r\nimport GlobalStyle from './themes/';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n      <GlobalStyle />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}